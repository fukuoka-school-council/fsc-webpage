---
import executivesData from "@/data/executives.json"
import newsData from "@/data/news.json"
import Layout from "@/layouts/Layout.astro"
import type { ContentUnion } from "@/types/content"
import t from "@/utils/i18n"

export const prerender = false

const locale = Astro.preferredLocale || Astro.currentLocale
const token = Astro.url.searchParams.get("token")

// GitHub API configuration
const GITHUB_BRANCH = "main"

// Function to create GitHub merge request
async function createMergeRequest(
	filePath: string,
	content: ContentUnion,
	commitMessage: string,
) {
	try {
		// First, get the current file's SHA
		const getResponse = await fetch(
			`https://api.github.com/repos/fukuoka-school-council/fsc-webpage/contents/${filePath}?ref=${GITHUB_BRANCH}`,
			{
				headers: {
					Authorization: `token ${token}`,
				},
			},
		)

		const fileData = await getResponse.json()

		if (!getResponse.ok) {
			return {
				success: false,
				message: `Failed to get file SHA: ${fileData.message}`,
			}
		}

		const sha = fileData.sha

		console.log(sha)

		// Now update the file with the SHA
		const response = await fetch(
			`https://api.github.com/repos/fukuoka-school-council/fsc-webpage/contents/${filePath}`,
			{
				method: "PUT",
				headers: {
					Authorization: `token ${token}`,
					"Content-Type": "application/json",
				},
				body: JSON.stringify({
					message: commitMessage,
					content: Buffer.from(
						JSON.stringify(content, null, 2),
					).toString("base64"),
					branch: GITHUB_BRANCH,
					sha: sha,
				}),
			},
		)

		if (response.ok) {
			return {
				success: true,
				message: t("admin.mergeRequestSuccess", locale),
			}
		} else {
			const error = await response.json()
			return { success: false, message: error.message }
		}
	} catch (error) {
		return {
			success: false,
			message:
				error instanceof Error
					? error.message
					: t("admin.unknownError", locale),
		}
	}
}

let result = null

if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData()

	const type = formData.get("type")

	const filePath =
		type === "executives"
			? "src/data/executives.json"
			: "src/data/news.json"
	const commitMessage = `auto: Update ${type} data`

	if (type === "executives") {
		// Process executives data
		const executives = []
		let index = 0

		while (true) {
			const name = formData.get(`executives[${index}][name]`)
			if (!name) break

			executives.push({
				name: String(name),
				furigana: String(
					formData.get(`executives[${index}][furigana]`) || "",
				),
				schoolRole: String(
					formData.get(`executives[${index}][schoolRole]`),
				),
				role: String(formData.get(`executives[${index}][role]`)),
				schoolName: String(
					formData.get(`executives[${index}][schoolName]`),
				),
				grade: Number(formData.get(`executives[${index}][grade]`)),
				comment: String(
					formData.get(`executives[${index}][comment]`) || "",
				),
			})
			index++
		}

		result = await createMergeRequest(filePath, executives, commitMessage)
	} else if (type === "news") {
		// Process news data
		const news = []
		let index = 0

		function toISOStringWithTimezone(date: Date): string {
			const pad = (str: string): string => `0${str}`.slice(-2)
			const year = date.getFullYear().toString()
			const month = pad((date.getMonth() + 1).toString())
			const day = pad(date.getDate().toString())
			const hour = pad(date.getHours().toString())
			const min = pad(date.getMinutes().toString())
			const sec = pad(date.getSeconds().toString())
			const tz = -date.getTimezoneOffset()
			const sign = tz >= 0 ? "+" : "-"
			const tzHour = pad((tz / 60).toString())
			const tzMin = pad((tz % 60).toString())

			return `${year}-${month}-${day}T${hour}:${min}:${sec}${sign}${tzHour}:${tzMin}`
		}

		while (true) {
			if (!formData.get(`news[${index}][id]`)) break

			const shouldDelete =
				formData.get(`news[${index}][delete]`)?.toString() === "true"
			if (!shouldDelete) {
				const existingArticle = newsData.find(
					(article) => article.id === index,
				)
				if (existingArticle) {
					news.push(existingArticle)
				} else {
					const date = toISOStringWithTimezone(new Date())

					// Create new article
					news.push({
						id: index,
						date: date,
						en: {
							title: String(
								formData.get(`news[${index}][en][title]`),
							),
							content: String(
								formData.get(`news[${index}][en][content]`),
							),
						},
						ja: {
							title: String(
								formData.get(`news[${index}][ja][title]`),
							),
							content: String(
								formData.get(`news[${index}][ja][content]`),
							),
						},
						author: {
							name: String(
								formData.get(`news[${index}][author][name]`),
							),
							icon: String(
								formData.get(`news[${index}][author][icon]`),
							),
						},
					})
				}
			}
			index++
		}

		result = await createMergeRequest(filePath, news, commitMessage)
	}
}
---

<Layout title="Admin Panel">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
  <a href="#main-content" class="skip-link">Skip to main content</a>
  <main id="main-content" class="admin-container" tabindex="-1">
    <div class="header-section">
      <h1 class="page-title">{t("admin.title", locale)}</h1>
      <p class="page-subtitle">{t("admin.subtitle", locale)}</p>
    </div>
    
    {!token ? (
      <div class="auth-error">
          <h2>{t("admin.authError", locale)}</h2>
          <p>{t("admin.authMessage", locale)}</p>
        </div>
    ) : (
      <>
        {result && (
          <div 
            class={`result-message ${result.success ? 'success' : 'error'}`}
            aria-live="polite"
            role="status"
            aria-atomic="true"
          >
            {result.message}
          </div>
        )}
        
        <form method="POST" class="admin-form" aria-label="Admin Panel Form">
          <div class="form-group">
            <label for="type">{t("admin.selectType", locale)}</label>
            <select id="type" name="type" aria-describedby="type-help">
              <option value="executives">{t("admin.executives", locale)}</option>
              <option value="news">{t("admin.news", locale)}</option>
            </select>
            <span id="type-help" class="help-text">Select the type of content you want to edit</span>
          </div>
          
          <div id="executives-editor" class="editor-section">
            <h2>{t("admin.editExecutives", locale)}</h2>
            <div id="executives-container">
              {executivesData.map((executive, index) => (
                <div class="executive-item" role="region" aria-label={`Executive ${index + 1}`}>
                  <h3>{t('admin.executiveNumber', locale, { index: String(index + 1) })}</h3>
                  <div class="form-row">
                    <div class="input-group">
                      <label for={`executive-name-${index}`}>{t('admin.name', locale)}</label>
                      <input type="text" id={`executive-name-${index}`} name={`executives[${index}][name]`} value={executive.name} aria-required="true" />
                    </div>
                    <div class="input-group">
                      <label for={`executive-furigana-${index}`}>{t('admin.furigana', locale)}</label>
                      <input type="text" id={`executive-furigana-${index}`} name={`executives[${index}][furigana]`} value={executive.furigana || ""} />
                    </div>
                  </div>
                  <div class="form-row">
                    <div class="input-group">
                      <label for={`executive-school-role-${index}`}>{t('admin.schoolRole', locale)}</label>
                      <input type="text" id={`executive-school-role-${index}`} name={`executives[${index}][schoolRole]`} value={executive.schoolRole} aria-required="true" />
                    </div>
                    <div class="input-group">
                      <label for={`executive-fsc-role-${index}`}>{t('admin.fscRole', locale)}</label>
                      <input type="text" id={`executive-fsc-role-${index}`} name={`executives[${index}][role]`} value={executive.role} aria-required="true" />
                    </div>
                  </div>
                  <div class="form-row">
                    <div class="input-group">
                      <label for={`executive-school-name-${index}`}>{t('admin.schoolName', locale)}</label>
                      <input type="text" id={`executive-school-name-${index}`} name={`executives[${index}][schoolName]`} value={executive.schoolName} aria-required="true" />
                    </div>
                    <div class="input-group">
                      <label for={`executive-grade-${index}`}>{t('admin.grade', locale)}</label>
                      <input type="number" id={`executive-grade-${index}`} name={`executives[${index}][grade]`} value={executive.grade} min="1" max="12" aria-required="true" />
                    </div>
                  </div>
                  <div class="input-group">
                    <label for={`executive-comment-${index}`}>{t('admin.comment', locale)}</label>
                    <textarea id={`executive-comment-${index}`} name={`executives[${index}][comment]`}>{executive.comment}</textarea>
                  </div>
                </div>
              ))}
            </div>
            <button type="button" class="add-btn">{t("admin.addExecutive", locale)}</button>
          </div>
          
          <div id="news-editor" class="editor-section" style="display: none;">
            <h2>{t("admin.editNews", locale)}</h2>
            <div id="news-container">
              {newsData.map((article, index) => (
                <div class="news-item" role="region" aria-label={`Article ${index + 1}`}>
                  <div class="form-row">
                    <h3>{t('admin.articleNumber', locale, { index: String(index + 1) })}</h3>
                    <label class="delete-checkbox">
                      <input type="checkbox" id={`delete-article-${index}`} name={`news[${index}][delete]`} value="true" aria-label="Delete this article" />
                      {t('admin.deleteArticle', locale)}
                    </label>
                  </div>
                  <div class="readonly-info">
                    <p><strong>{t('admin.date', locale)}:</strong> {article.date.split('T')[0]}</p>
                    <p><strong>{t('admin.englishTitle', locale)}:</strong> {article.en.title}</p>
                    <p><strong>{t('admin.japaneseTitle', locale)}:</strong> {article.ja.title}</p>
                    {article.author?.name && <p><strong>{t('admin.author', locale)}:</strong> {article.author.name}</p>}
                  </div>
                  <input type="hidden" name={`news[${index}][id]`} value={article.id} />
                </div>
              ))}
            </div>
            <button type="button" class="add-btn">{t("admin.addArticle", locale)}</button>
          </div>
          
          <button type="submit" class="submit-btn">{t("admin.createMergeRequest", locale)}</button>
        </form>
        
        <script>
          const locale = navigator.languages[0] || navigator.language // preferred -> current

          function t(key: string, locale: string, placeholder?: { [key: string]: string }) {
            const enTranslations: { [key: string]: string } = {
              "name": "Name",
              "furigana": "Furigana",
              "schoolRole": "School Role",
              "fscRole": "FSC Role",
              "schoolName": "School Name",
              "grade": "Grade",
              "comment": "Comment",
              "englishTitle": "English Title",
              "englishContent": "English Content",
              "japaneseTitle": "Japanese Title",
              "japaneseContent": "Japanese Content",
              "authorName": "Author Name",
              "authorIcon": "Author Icon URL",
              "deleteArticle": "Delete this article",
              "date": "Date",
              "author": "Author",
              "executiveNumber": "Executive #{index}",
              "articleNumber": "Article #{index}",
              "englishVersion": "English Version",
              "japaneseVersion": "Japanese Version"
            }
            
            const jaTranslations: { [key: string]: string } = {
              "name": "名前",
              "furigana": "ふりがな",
              "schoolRole": "学校での役職",
              "fscRole": "FSCでの役職",
              "schoolName": "学校名",
              "grade": "学年",
              "comment": "コメント",
              "englishTitle": "英語タイトル",
              "englishContent": "英語コンテンツ",
              "japaneseTitle": "日本語タイトル",
              "japaneseContent": "日本語コンテンツ",
              "authorName": "著者名",
              "authorIcon": "著者アイコンURL",
              "deleteArticle": "この記事を削除",
              "date": "日付",
              "author": "著者",
              "executiveNumber": "役員 #{index}",
              "articleNumber": "記事 #{index}",
              "englishVersion": "英語版",
              "japaneseVersion": "日本語版"
            }
            
            const translations = (locale === "ja" || locale === "jp") ? jaTranslations : enTranslations
            let text = translations[key] || key

            if (placeholder) {
              return Object.entries(placeholder).reduce(
                (text, [key, value]) => text.replace(`{${key}}`, value),
                text,
              )
            }

            return text
          }

          function updateForm() {
            const type = (document.getElementById('type') as HTMLSelectElement)?.value

            const executivesEditor = document.getElementById('executives-editor')
            const newsEditor = document.getElementById('news-editor')

            if (executivesEditor) {
              executivesEditor.style.display = type === 'executives' ? 'block' : 'none'
            }
            if (newsEditor) {
              newsEditor.style.display = type === 'news' ? 'block' : 'none'
            }
          }
          
          // Initialize form and event listeners
          document.addEventListener('DOMContentLoaded', function() {
            const typeSelect = document.getElementById('type')
            if (typeSelect) {
              typeSelect.addEventListener('change', updateForm)
              // Initial call to set correct display
              updateForm()
            }
            
            // Add event listeners for Add buttons
            const addExecutiveBtn = document.querySelector('#executives-editor .add-btn')
            if (addExecutiveBtn) {
              addExecutiveBtn.addEventListener('click', addExecutive)
            }
            
            const addArticleBtn = document.querySelector('#news-editor .add-btn')
            if (addArticleBtn) {
              addArticleBtn.addEventListener('click', addNewsArticle)
            }
          })
          
          // Reusable CSS constants
          const inputStyles = "padding: 0.875rem; border-radius: 8px; color: #ffffff; font-size: 0.95rem; transition: all 0.2s ease;"
          const textareaStyles = "padding: 0.875rem; border-radius: 8px; color: #ffffff; min-height: 120px; resize: none; line-height: 1.5; font-size: 0.95rem; transition: all 0.2s ease;"
          const gridStyles = "display: grid; grid-template-columns: 1fr 1fr; gap: 1.25rem; margin-bottom: 1.25rem;"
          const itemStyles = "background: #1a1a1a; padding: 1.75rem; border-radius: 12px; margin-bottom: 1.75rem; border: 1px solid #2a2a2a;"
          const headingStyles = "color: #0070f3; margin-bottom: 1.25rem; font-size: 1.25rem; font-weight: 600;"
          const subheadingStyles = "color: #00d4aa; margin: 0 0 0.75rem 0; font-size: 1.1rem; font-weight: 500;"
          const basicStyles = `
            .add-item {
              input, textarea {
                width:  calc(100% - 32px);
              }
              
              input, textarea {
                padding: 0.875rem;
                border: 1px solid #333333;
                border-radius: 8px;
                background: #1a1a1a;
                color: #ffffff;
                margin-bottom: 1rem;
                font-size: 0.95rem;
                transition: all 0.2s ease;
              }
              
              input:focus, textarea:focus {
                outline: none;
                border-color: #0070f3;
                box-shadow: 0 0 0 3px rgba(0, 112, 243, 0.15);
              }
            }
          `

          function addExecutive() {
            const container = document.getElementById('executives-container')
            const index = container?.children.length || 0
            const newExecutive = `
              <div class="executive-item add-item" style="${itemStyles}">
                <h3 style="${headingStyles}">${t('executiveNumber', locale, { index: String(index + 1) })}</h3>
                <div style="${gridStyles}">
                  <input type="text" name="executives[${index}][name]" placeholder="${t('name', locale)}" style="${inputStyles}" />
                  <input type="text" name="executives[${index}][furigana]" placeholder="${t('furigana', locale)}" style="${inputStyles}" />
                </div>
                <div style="${gridStyles}">
                  <input type="text" name="executives[${index}][schoolRole]" placeholder="${t('schoolRole', locale)}" style="${inputStyles}" />
                  <input type="text" name="executives[${index}][role]" placeholder="${t('fscRole', locale)}" style="${inputStyles}" />
                </div>
                <div style="${gridStyles}">
                  <input type="text" name="executives[${index}][schoolName]" placeholder="${t('schoolName', locale)}" style="${inputStyles}" />
                  <input type="number" name="executives[${index}][grade]" placeholder="${t('grade', locale)}" style="${inputStyles}" />
                </div>
                <textarea name="executives[${index}][comment]" placeholder="${t('comment', locale)}" style="${textareaStyles}"></textarea>

                <style>
                  ${basicStyles}
                </style>
              </div>
            `
            container?.insertAdjacentHTML('beforeend', newExecutive)
          }
          
          function addNewsArticle() {
            const container = document.getElementById('news-container')
            const index = container?.children.length || 0
            const newArticle = `
              <div class="news-item add-item" style="${itemStyles}">
                <h3 style="${headingStyles}">${t('articleNumber', locale, { index: String(index + 1) })}</h3>
                
                <h4 style="${subheadingStyles}">${t('englishVersion', locale)}</h4>
                <input type="text" name="news[${index}][en][title]" placeholder="${t('englishTitle', locale)}" style="${inputStyles} margin-bottom: 1rem;" />
                <textarea name="news[${index}][en][content]" placeholder="${t('englishContent', locale)}" style="${textareaStyles}"></textarea>
                
                <h4 style="${subheadingStyles}">${t('japaneseVersion', locale)}</h4>
                <input type="text" name="news[${index}][ja][title]" placeholder="${t('japaneseTitle', locale)}" style="${inputStyles} margin-bottom: 1rem;" />
                <textarea name="news[${index}][ja][content]" placeholder="${t('japaneseContent', locale)}" style="${textareaStyles}"></textarea>
                
                <div style="${gridStyles}">
                  <input type="text" name="news[${index}][author][name]" placeholder="${t('authorName', locale)}" style="${inputStyles}" />
                  <input type="text" name="news[${index}][author][icon]" placeholder="${t('authorIcon', locale)}" style="${inputStyles}" />
                </div>
                <input type="hidden" name="news[${index}][id]" value="${index}" />

              <style>
                .add-item {
                  input, textarea {
                    margin-bottom: 1.25rem !important;
                  }
                }
                ${basicStyles}
              </style>
              </div>
            `
            container?.insertAdjacentHTML('beforeend', newArticle)
          }
        </script>
      </>
    )}
  </main>
</Layout>

<style>
  html {
    background: #0a0a0a;
  }
  
  .admin-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: #0a0a0a;
    color: #ffffff;
    min-height: 100vh;
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
  }

  .skip-link {
    position: absolute;
    top: -40px;
    left: 0;
    background: #000;
    color: #fff;
    padding: 8px;
    text-decoration: none;
    z-index: 1000;
  }

  .skip-link:focus {
    top: 0;
  }
  
  .header-section {
    margin-bottom: 2rem;
  }
  
  .page-title {
    font-size: 3rem;
    font-weight: 800;
    color: #ffffff;
    margin: 0 0 0.5rem 0;
    letter-spacing: -0.05em;
    line-height: 1.1;
    background: linear-gradient(135deg, #ffffff 0%, #cccccc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .page-subtitle {
    color: #666666;
    font-size: 1.25rem;
    margin: 0;
    font-weight: 400;
    line-height: 1.4;
  }
  
  .auth-error {
    text-align: center;
    padding: 2rem;
    background: #1a1a1a;
    border-radius: 12px;
    margin: 2rem 0;
    border: 1px solid #333333;
  }
  
  .auth-error h2 {
    color: #ff6b6b;
    margin: 0 0 1rem 0;
    font-size: 1.25rem;
  }
  
  .admin-form {
    background: #111111;
    padding: 2rem;
    border-radius: 16px;
    margin: 2rem 0;
    border: 1px solid #222222;
  }
  
  .form-group {
  margin-bottom: 2rem;
}

label {
  display: block;
  margin-bottom: 0.75rem;
  font-weight: 600;
  color: #ffffff;
  font-size: 0.95rem;
}

.help-text {
  display: block;
  margin-top: 0.25rem;
  font-size: 0.875rem;
  color: #cccccc;
}

  select {
    width: 100%;
    -webkit-appearance:none;
    -moz-appearance:none;
    appearance: none;
  }

  input, textarea {
    width:  calc(100% - 32px);
  }
  
  select, input, textarea {
    padding: 0.875rem;
    border: 1px solid #333333;
    border-radius: 8px;
    background: #1a1a1a;
    color: #ffffff;
    font-size: 0.95rem;
    transition: all 0.2s ease;
  }
  
  select:focus, input:focus, textarea:focus {
    outline: none;
    border-color: #0070f3;
    box-shadow: 0 0 0 3px rgba(0, 112, 243, 0.15);
  }
  
  .form-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1.25rem;
    margin-bottom: 1.25rem;
  }
  
  .editor-section {
    margin: 2.5rem 0;
  }
  
  .executive-item, .news-item {
    background: #1a1a1a;
    padding: 1.75rem;
    border-radius: 12px;
    margin-bottom: 1.75rem;
    border: 1px solid #2a2a2a;
  }
  
  .executive-item h3, .news-item h3 {
    color: #0070f3;
    margin-bottom: 1.25rem;
    font-size: 1.25rem;
    font-weight: 600;
  }
  
  .news-item h4 {
    color: #00d4aa;
    margin: 1.25rem 0 0.75rem 0;
    font-size: 1.1rem;
    font-weight: 500;
  }
  
  textarea {
    min-height: 120px;
    resize: none;
    line-height: 1.5;
  }
  
  .add-btn, .submit-btn {
    background: #0070f3;
    color: white;
    padding: 0.875rem 1.75rem;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
    font-size: 0.95rem;
  }
  
  .add-btn:hover, .submit-btn:hover {
    background: #0056b3;
    transform: translateY(-1px);
  }
  
  .add-btn {
    background: #00d4aa;
  }

  .add-btn:hover {
    background: #00b894;
  }

  .delete-checkbox {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.875rem 1.25rem;
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
    color: white;
    border-radius: 8px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid rgba(255, 107, 107, 0.3);
    box-shadow: 0 4px 12px rgba(255, 107, 107, 0.15);
  }

  .delete-checkbox:hover {
    background: linear-gradient(135deg, #ee5a52 0%, #d64545 100%);
    transform: translateY(-1px);
    box-shadow: 0 6px 16px rgba(255, 107, 107, 0.25);
  }

  .delete-checkbox input[type="checkbox"] {
    width: 18px;
    margin: 0;
    accent-color: #ffffff;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 4px;
  }  
  
  .result-message {
    padding: 1.25rem;
    border-radius: 8px;
    margin: 1.25rem 0;
    font-weight: 500;
    border: 1px solid transparent;
  }
  
  .result-message.success {
    background: rgba(0, 212, 170, 0.15);
    color: #00d4aa;
    border-color: rgba(0, 212, 170, 0.3);
    border: 2px solid #00d4aa;
  }
  
  .result-message.error {
    background: rgba(255, 107, 107, 0.15);
    color: #ff6b6b;
    border-color: rgba(255, 107, 107, 0.3);
    border: 2px solid #ff6b6b;
  }
  
  @media (max-width: 768px) {
    .admin-container {
      padding: 1rem 0 1rem 0;
      width: 100dvw;
      margin-left: calc(-50vw + 50%);
      margin-right: calc(-50vw + 50%);
    }
    
    .input-group label {
      font-size: 1rem;
      margin-bottom: 0.375rem;
    }
    
    input, select, textarea {
      min-height: 44px;
      font-size: 16px;
    }
    
    button {
      min-height: 44px;
      min-width: 44px;
    }
    
    .page-title {
      font-size: 2rem;
      text-align: center;
    }
    
    .page-subtitle {
      font-size: 1rem;
      text-align: center;
    }
    
    .admin-form {
      background: #0a0a0a;
      border: none;
      padding: 1.5rem;
      margin: 1rem 0;
      width: 100%;
      box-sizing: border-box;
    }
    
    .form-row {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
    
    .executive-item, .news-item {
      padding: 1.25rem;
      margin-bottom: 1.25rem;
      width: 100%;
      box-sizing: border-box;
    }
    
    .executive-item h3, .news-item h3 {
      font-size: 1.1rem;
    }
    
    select, input, textarea {
      font-size: 16px; /* Prevents zoom on iOS */
      padding: 0.75rem;
      width: 100%;
      box-sizing: border-box;
    }
    
    .add-btn, .submit-btn {
      width: 100%;
      padding: 1rem;
      font-size: 1rem;
    }
    
    .delete-checkbox {
      padding: 0.75rem 1rem;
      font-size: 0.9rem;
    }
  }
  
  @media (max-width: 480px) {
    .admin-container {
      padding: 0.75rem 0 0.75rem 0;
      width: 100dvw;
      margin-left: calc(-50vw + 50%);
      margin-right: calc(-50vw + 50%);
    }
    
    .page-title {
      font-size: 1.75rem;
    }
    
    .admin-form {
      background: #0a0a0a;
      border: none;
      padding: 1rem;
      width: 100%;
      box-sizing: border-box;
    }
    
    .executive-item, .news-item {
      padding: 1rem;
      width: 100%;
      box-sizing: border-box;
    }
    
    .form-group {
      margin-bottom: 1.5rem;
      width: 100%;
    }
    
    .editor-section {
      margin: 2rem 0;
      width: 100%;
    }
    
    /* Better touch targets for mobile */
    .add-btn, .submit-btn {
      min-height: 44px; /* Minimum touch target size */
      display: flex;
      align-items: center;
      justify-content: center;
      width: 100%;
    }
    
    select, input, textarea {
      min-height: 44px; /* Better touch targets for form elements */
      width: 100%;
      box-sizing: border-box;
    }
    
    /* Prevent text selection on interactive elements */
    .add-btn, .submit-btn, .delete-checkbox {
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
    }
  }
  
  /* Additional mobile optimizations */
  @media (hover: none) and (pointer: coarse) {
    /* Styles for touch devices only */
    .add-btn:hover, .submit-btn:hover, .delete-checkbox:hover {
      transform: none; /* Remove hover effects on touch devices */
    }
    
    input:focus, textarea:focus, select:focus {
      box-shadow: 0 0 0 2px rgba(0, 112, 243, 0.3); /* More subtle focus for touch */
    }
  }